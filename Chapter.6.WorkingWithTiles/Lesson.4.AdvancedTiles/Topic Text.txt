Introduction
Windows applications have had icons dating back to Windows 3.1, but it was not until Windows 8 tha the icon was re-imagined and updated.  Windows 8 has brought us the concept
of the tile, more importantly it has given us live tiles.  Apart from being able to create Live tiles and tiles which change data content based on the state of your application
windows 8 developers also have the ability to schedule updates to their tiles. The ability to schedule an update will allow you to push data to a tile based on time sensitve
information
 
* We are going to learn how to setup a Live Tile to update at some point in the future
* We are gonig to learn how to query the system for a list of tiles which are schedule to update in the future
* We are going to learn how to setup future tiles to expire based on a setting

Summary
In this lesson we learned how to schedule, maintain and expire live tile updates

* We learned how to setup a Live Tile to update at some point in the future
* We learned how to query the system for a list of tiles which are schedule to update in the future
* We learned how to setup future tiles to expire based on a setting

Advanced Tiles

DONE - Create a standard live tile
DONE - Create a future live tile (scheduled tiles)
DONE - Show how to query future tiles (scheduled tiles)
DONE - Show how to setup the future tile to expire

1) Setup a live tile w/ text

        #region Static Tiles

        public RelayCommand UpdateStaticLiveTileCommand
        {
            get { return _updateStaticLiveTileCommand ?? (_updateStaticLiveTileCommand = new RelayCommand(UpdateStaticLiveTile)); }
        }

        private void UpdateStaticLiveTile()
        {
            var applicationTile = TileContentFactory.CreateTileWidePeekImage02(); 
            var tileUpdater = TileUpdateManager.CreateTileUpdaterForApplication(CoreApplication.Id);

            // clear the existing tile info
            tileUpdater.Clear();

            applicationTile.TextHeading.Text = "Top Scores";
            applicationTile.TextBody1.Text = "Player 1 - 100";
            applicationTile.TextBody2.Text = "Player 2 - 92";
            applicationTile.TextBody3.Text = "Player 3 - 90";
            applicationTile.TextBody4.Text = "Player 4 - 85";

            applicationTile.RequireSquareContent = false;
            applicationTile.Image.Src = "/Images/LiveTileImage_310x150.png";

            var tileNotification = applicationTile.CreateNotification();
            tileUpdater.Update(tileNotification);
        }

    #endregion

1a) Clear existing tile ocntent
        public RelayCommand ClearLiveTileCommand
        {
            get { return _clearLiveTileCommand ?? (_clearLiveTileCommand = new RelayCommand(ClearLiveTile)); }
        }

        private void ClearLiveTile()
        {
            var tileUpdater = TileUpdateManager.CreateTileUpdaterForApplication(CoreApplication.Id);

            // clear the existing tile info
            tileUpdater.Clear();
        }

2) setup the first tile w/ a schedule

	-> This tile does not expire
        public RelayCommand FutureLiveTileCommand
        {
            get { return _futureLiveTileCommand ?? (_futureLiveTileCommand = new RelayCommand(FutureLiveTile)); }
        }

        private void FutureLiveTile()
        {
            var applicationTile = TileContentFactory.CreateTileWidePeekImage02();
            var tileUpdater = TileUpdateManager.CreateTileUpdaterForApplication(CoreApplication.Id);

            // clear the existing tile info
            tileUpdater.Clear();

            applicationTile.TextHeading.Text = "Future Top Scores";
            applicationTile.TextBody1.Text = "Future Player 1 - 100";
            applicationTile.TextBody2.Text = "Future Player 1 - 92";
            applicationTile.TextBody3.Text = "Future Player 1 - 90";
            applicationTile.TextBody4.Text = "Future Player 1 - 85";

            applicationTile.RequireSquareContent = false;
            applicationTile.Image.Src = "/Images/AltLiveTileImage_310x150.png";

            var futureTile = new ScheduledTileNotification(applicationTile.GetXml(), DateTime.Now.AddSeconds(10));
            
            tileUpdater.AddToSchedule(futureTile);                    
        }

3) setup to expire

            if ( ExpireContent )
            {
                futureTile.ExpirationTime = DateTime.Now.AddSeconds(20);
            }

        public bool ExpireContent
        {
            get { return _expireContent; }
            set
            {
                _expireContent = value;
                OnPropertyChanged("ExpireContent");
            }
        }

4) setup to query queued tiles

        public RelayCommand QueryFutureLiveTileCommand
        {
            get { return _queryFutureLiveTileCommand ?? (_queryFutureLiveTileCommand = new RelayCommand(QueryFutureLiveTile)); }
        }

        private void QueryFutureLiveTile()
        {
            var tileUpdater = TileUpdateManager.CreateTileUpdaterForApplication(CoreApplication.Id);

            var scheduledNotifications = tileUpdater.GetScheduledTileNotifications();

            foreach (var tile in scheduledNotifications)
            {
		tileUpdater.RemoveFromSchedule(tile);  
                Debug.WriteLine(string.Format("Tile Id {0} Delivery Time {1} Expiration Time: {2} ", tile.Id, tile.DeliveryTime, tile.ExpirationTime ));
            }
        }

- Update the live tile via azure
- Create system notifications -- real time
- Create scheduled notifications