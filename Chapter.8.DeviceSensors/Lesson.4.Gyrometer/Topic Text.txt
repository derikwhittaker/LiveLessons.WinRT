
Introduction
When building Windows 8 applications you may need to access some of the many available sensors and hardware features which are available on users devices.
One of the many sensors and features in which a developer can access is Gyrometer sensor.  the Gyrometer sensor can be used to get a angular velocity of the device
on the x y and z axis.  This information can be used to move objects around on the screen.  One of the more common usages for the gyrometer is in games. 
with this sensor you can allow the users to control the game play by simply tilting the device.

* we are going to learn how to attach to the Gyrometer sensor
* we are going to learn how to deteremine if the Gyrometer sensor is available on your users device
* we are going to learn how to get X Y and Z angles values via eventing
* we are going to learn how to get X Y and Z angles values via polling

Summary
In this lesson we learned how to use the built in Gyrometer sensor on your users device to get the angulary velocity of the device on the X Y and Z axis
* we learned how to attach to the Gyrometer sensor
* we learned how to deteremine if the Gyrometer sensor is available on your users device
* we learned how to get X Y and Z angles values via eventing
* we learned how to get X Y and Z angles values via polling

* show the UI

* setup the gyrometer

	private Sensor.Gyrometer _gyrometer;

	private void SetupSensor()
        {
            _gyrometer = Sensor.Gyrometer.GetDefault();

            if (_gyrometer == null)
            {
                // there is no grometer on this device.....
            }
        }

	SetupSensor();

* setup the core dispatcher

	public DashboardViewModel(CoreDispatcher dispatcher)

	DataContext = new DashboardViewModel(Window.Current.Dispatcher);

* setup the eventing


        private void SetupEventing(bool enableEventing)
        {
            if (enableEventing)
            {
                _gyrometer.ReadingChanged += GyrometerOnReadingChanged;
                CurrentReadingStyle = "Eventing";
            }
            else
            {
                _gyrometer.ReadingChanged -= GyrometerOnReadingChanged;
                CurrentReadingStyle = "Stopped";
            }
        }

        private async void GyrometerOnReadingChanged(Sensor.Gyrometer sender, Sensor.GyrometerReadingChangedEventArgs args)
        {
            await _dispatcher.RunAsync(CoreDispatcherPriority.Normal, () =>
            {
                XAxisReading = args.Reading.AngularVelocityX;
                YAxisReading = args.Reading.AngularVelocityY;
                ZAxisReading = args.Reading.AngularVelocityZ;

                SetupNewLocation();
            });            
        }


            SetupEventing(IsEventing);
            SetupPolling(IsPolling);

* run the app

* setup polling

        private void SetupPolling(bool enablePolling)
        {
            if (enablePolling)
            {
                _dispatcherTimer = new DispatcherTimer();
                _dispatcherTimer.Interval = new TimeSpan(0, 0, 0, 1);
                _dispatcherTimer.Tick += DispatcherTimerOnTick;

                _dispatcherTimer.Start();

                CurrentReadingStyle = "Polling";
            }
            else
            {
                if (_dispatcherTimer != null)
                {
                    _dispatcherTimer.Stop();
                    _dispatcherTimer = null;
                }

                CurrentReadingStyle = "Stopped";
            }
        }

        private void DispatcherTimerOnTick(object sender, object o)
        {
            XAxisReading = _gyrometer.GetCurrentReading().AngularVelocityX;
            YAxisReading = _gyrometer.GetCurrentReading().AngularVelocityY;
            ZAxisReading = _gyrometer.GetCurrentReading().AngularVelocityZ;

            SetupNewLocation();
        }