http://msdn.microsoft.com/en-US/library/windows/apps/xaml/Hh465115
http://code.msdn.microsoft.com/windowsapps/App-activating-and-ec15b168

Introduction
With the introduction of Windows 8 developers now have the ability to utilize the various contracts, such as the search, share and settings contracts.  These contracts
give your application the ability to appear integrated with both the core operating system, they also give your uses a consistant experiance between applications to perform
these common tasks.  We are going to take a look at how you can integrate the Settings contract into your applicaiton.  This contract allows your application to expose its
settings via the Settings charm and give users a consistant experiance across all Windows 8 applications

* We are going to learn how to get access to the Settings pane for the current view
* We are gonig to learn how to define which settings options are available for the current view
* We are going to learn how to launch our settings pane and manipuate controls on the view

Summary
In this lesson we learned about the settings contract and how we can use this to expose application or page level settings
to our user in a consistant way

* We learned how to get access to the Settings pane for the current view
* We learned how to define which settings options are available for the current view
* We learnedhow to launch our settings pane and manipuate controls on the view
	
* talk about the 3 parts of the application life cycle
	* Launching
	* Suspending
	* Resuming

* walk though and take a look at the Launching event
	* point out how the prior execution state is provided via an arg and you can handle them if needed.

* walk though the template and how it sets up OnSuspending for you.
	* mention that this code will ONLY manage your location within the application
		and NOT your data
	* mention you have a total of 5 seconds to complete any saving
	* point out what the deferral does

* launch the app with NO debugger and show it going to suspension mode
	* via the task manager

* launch the application again but with the debugger attached and try to get it to suspend
	* explain why it will not suspend
	* explain that we cannot really debug these actions because of this but they have provided
		a way. 
		* right click the menu and select 'Debug Location'
		* point out the options
		* run the app and show how each of the states work these work

* now lets wire up and talk about the resume event
	* this is not needed to re-hidrate our previous state as the generated state manager wll
		handle this for you.
	* this can be used to possible rebuild your application data if it is populated via a remote source, such as web server or remote API


* add the resume event handler
* show the IResumable interface
	* add it to our underlying VM

* create the OnResume code
        private void OnResuming(object sender, object o)
        {
            var asFrame = Window.Current.Content as Frame;

            var layoutAwarePageContent = ((LayoutAwarePage) asFrame.Content);

            if (layoutAwarePageContent != null)
            {
                if (layoutAwarePageContent.DataContext is IResumable)
                {
                    var asIResumable = ((IResumable) layoutAwarePageContent.DataContext);
                    asIResumable.Resume();
                }
            }
        }