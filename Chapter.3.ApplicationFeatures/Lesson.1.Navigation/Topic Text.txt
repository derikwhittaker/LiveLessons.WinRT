Introduction
When talking about the MVVM pattern one constant is the ability to remove need for using the code behind and the want to use the 
viewmodel to handle any ui interaction.  The mvvm pattern allows this in many ways and one way is via Commanding.  Commanding
is a way for your viewmodel to handle a user action request such as pressing a button. 

* We are going to learn about the ICommand interface and how this interface is used to handle user interaction in the viewmodel
* We are gonig to learn how to handle basic commands, ones with no arguments
* We are going to learn how to handle commands which require arguments
* We are going to learn how to use the CanExecute feature of ICommand to enable/disable the action based on data in the view model

Summary
In this lesson we learned about how commanding in XAML based applications works.
* we learned about the ICommand interface and how it allows for commanding
* we learned about how to use the ICommand interface to handle basic commands
* we learned how to handle commands which require user arguments
* we learned how to use the Can Execute ability of ICommand to enable/disable the action based on view model state


When building a Windows 8 application it is almost a given that you are gonig to have multiple pages inside your app and
its also a given you will need to navigate between these pages.  The question is how do you handle this navigation?  How do you pass
parameters or values between pages and finally how do you do this inside your view model?  This is exactly what we are going to look 
here.

* setup the dashboard vm to take the frame
            var frame = Window.Current.Content as Frame;
            DataContext = new DashboardViewModel(frame);

* setup the dashboard vm to navigate to the first page
	* talk about how we are going to use the _currentFrame.navigate
	* talk about how with Win 8 the typcial navigation is view first, not view model first

        public RelayCommand SimpleNavigationCommand
        {
            get { return _simpleNavigationCommand ?? (_simpleNavigationCommand = new RelayCommand(SimpleNavigation)); }
        }
        
        private void SimpleNavigation()
        {
            _currentFrame.Navigate(typeof (SimpleNavigationPage));
        }

* run the application

* time to look at some of the build in features such as goBack / goFoward

* Add the logic to go forward
        public RelayCommand SimpleNavigationWithForwardCommand
        {
            get
            {
                return _simpleNavigationWithForwardCommand ??
                       (_simpleNavigationWithForwardCommand = new RelayCommand(SimpleNavigationWithForward));
            }
        }

        private void SimpleNavigationWithForward()
        {
            if ( _currentFrame.CanGoForward )
            {
                _currentFrame.GoForward();
            }
        }

* run the app

* talk about how we can listen to navigation events in order to do something important
	* open the layoutawarepage

* setup the nav events        
        public RelayCommand SimpleNavigationWithEventsCommand
        {
            get { return _simpleNavigationWithEventsCommand ?? (_simpleNavigationWithEventsCommand = new RelayCommand(SimpleNavigationWithEvents)); }
        }

        private void SimpleNavigationWithEvents()
        {
            _currentFrame.Navigated += (sender, args) => { Debug.WriteLine("Navigation Completed"); };
            _currentFrame.Navigating += (sender, args) => { Debug.WriteLine("Navigation In Progress"); };
            
            _currentFrame.Navigate(typeof(SimpleNavigationPage));
        }

* run the app

* talk about how we can pass values from page to page

* setup the command

        public RelayCommand SimpleNavigationWithArgumentsCommand
        {
            get { return _simpleNavigationWithArgumentsCommand ?? (_simpleNavigationWithArgumentsCommand = new RelayCommand(SimpleNavigationWithArguments)); }
        }

        private void SimpleNavigationWithArguments()
        {
            _currentFrame.Navigate(typeof(ArgumentNavigationPage), "Some Value");
        }

* talk about how we have to get these values in the ctr
	_frame.Navigated += (sender, args) =>
                                    {
                                        PassedArgument = args.Parameter.ToString();
                                    };

* run the app

* now put a break point in this event and navigate to another page.  talk about how this will first for ALL navigation

* fix the issue

_frame.Navigated += HandleNavigated;

       
        public string PassedArgument
        {
            get { return _passedArgument; }
            set { _passedArgument = value; OnPropertyChanged("PassedArgument"); }
        }

        private void HandleNavigated(object sender, NavigationEventArgs args)
        {
            if ((args.NavigationMode == NavigationMode.New || args.NavigationMode == NavigationMode.Forward)
                && args.SourcePageType == typeof(ArgumentNavigationPage))
            {
                PassedArgument = args.Parameter.ToString();
            }
            else
            {
                _frame.Navigated -= HandleNavigated;
            }
        }

