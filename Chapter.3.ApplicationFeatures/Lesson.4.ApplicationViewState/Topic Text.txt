Introduction
With the introduction of Windows 8 developers now have the ability to utilize the various contracts, such as the search, share and settings contracts.  These contracts
give your application the ability to appear integrated with both the core operating system, they also give your uses a consistant experiance between applications to perform
these common tasks.  We are going to take a look at how you can integrate the Settings contract into your applicaiton.  This contract allows your application to expose its
settings via the Settings charm and give users a consistant experiance across all Windows 8 applications

* We are going to learn about each of the 3 available View States which need to be supported in a windows 8 application
* We are gonig to learn how to setup and support the Full Screen state, this the default state your app will open to
* We are going to learn how to setup and support the Snapped state, this is when your app is snapped to the narrow region of the screen
* We are going to learn how to setup and support the Filled state, this is when your app is snapped to the large region of the screen

Summary
In this lesson we learned about the 3 available view states which are supported in windows 8 applications

* We learned about each of the 3 available View States which need to be supported in a windows 8 application
* We learned how to setup and support the Full Screen state, this the default state your app will open to
* We learned how to setup and support the Snapped state, this is when your app is snapped to the narrow region of the screen
* We learned how to setup and support the Filled state, this is when your app is snapped to the large region of the screen

* run the base application
	* talk how the default is the full screen
	* snap another application
	
* open the page, show how the viewstate manager is used
	* talk about how we use the view manager to know what state we are currently
	* open the LayoutawarePage.cs file.  show how this base class is used in conjuction w/ the view state manager to know when state changes

* ask the question, how do we easily test this?  Do we have to do  trial and error?  Meaning do we have to make some UI changes
	run the application see how it looks and repeat?  NO, fotunatly we can use some built in features of Visual Studio to 
	allow us to simplify the amount of effort it takes to handle view states
	
	* Show how we can force the app at design time into a given view state via the Device toolbar